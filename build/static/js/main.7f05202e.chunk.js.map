{"version":3,"sources":["components/Input/index.js","components/Button/index.js","apis/auth.js","containers/Login/index.js","containers/Signup/index.js","routes.js","App.js","serviceWorker.js","index.js"],"names":["Input","_ref","label","secret","onChange","name","react_default","a","createElement","Fragment","className","data-validate","type","defaultProps","Button","text","onClick","signup","email","password","firebase","createUserWithEmailAndPassword","then","user","Promise","resolve","catch","error","reject","login","signInWithEmailAndPassword","Login","state","loading","handleChange","e","_e$target","target","value","_this","setState","Object","defineProperty","loginUser","_this$state","toast","success","props","history","push","err","message","this","components_Input","components_Button","Link","to","Component","Signup","registerUser","Dashboard","React","lazy","all","__webpack_require__","bind","Routes","Route","exact","path","component","SignUp","Suspense","fallback","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","enableLogging","logMessage","console","log","Date","toISOString","App","BrowserRouter","routes","lib","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0SAEMA,EAAQ,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,MAAOC,EAAVF,EAAUE,OAAQC,EAAlBH,EAAkBG,SAAUC,EAA5BJ,EAA4BI,KAA5B,OACZC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,gBACbJ,EAAAC,EAAAC,cAAA,QAAME,UAAU,QAAQR,IAE1BI,EAAAC,EAAAC,cAAA,OACEE,UAAU,+BACVC,gBAAc,wBAEdL,EAAAC,EAAAC,cAAA,SACEE,UAAU,WACVE,KAAMT,EAAS,WAAa,OAC5BE,KAAMA,EACND,SAAUA,IAEZE,EAAAC,EAAAC,cAAA,QAAME,UAAU,sBAKtBV,EAAMa,aAAe,CACnBV,QAAQ,EACRC,SAAU,cAGGJ,QCzBTc,EAAS,SAAAb,GAAA,IAAEc,EAAFd,EAAEc,KAAMC,EAARf,EAAQe,QAAR,OACbV,EAAAC,EAAAC,cAAA,OAAKE,UAAU,sCACbJ,EAAAC,EAAAC,cAAA,UAAQI,KAAK,SAASF,UAAU,oBAAoBM,QAASA,GAAUD,KAI3ED,EAAOD,aAAe,CAClBG,QAAS,cAGEF,gBCVTG,EAAS,SAACC,EAAOC,GACrB,OAAOC,SAEJC,+BAA+BH,EAAOC,GACtCG,KAAK,SAAAC,GACJ,OAAOC,QAAQC,QAAQF,KAExBG,MAAM,SAASC,GACd,OAAOH,QAAQI,OAAOD,MAItBE,EAAQ,SAACX,EAAOC,GAClB,OAAOC,SAEJU,2BAA2BZ,EAAOC,GAClCG,KAAK,SAAAC,GACJ,OAAOC,QAAQC,QAAQF,KAExBG,MAAM,SAASC,GACd,OAAOH,QAAQI,OAAOD,MC+CfI,6MA7DbC,MAAQ,CACNd,MAAO,GACPC,SAAU,GACVc,SAAS,KAGXC,aAAe,SAAAC,GAAK,IAAAC,EACMD,EAAEE,OAAlBhC,EADU+B,EACV/B,KAAMiC,EADIF,EACJE,MACdC,EAAKC,SAAS,kBAAAC,OAAAC,EAAA,EAAAD,CAAA,GACXpC,EAAOiC,QAIZK,UAAY,WAAM,IAAAC,EACYL,EAAKP,MAAzBd,EADQ0B,EACR1B,MAAOC,EADCyB,EACDzB,SACfoB,EAAKC,SAAS,iBAAO,CACnBP,SAAS,KAEXJ,EAAMX,EAAOC,GACVG,KAAK,SAAAC,GACJsB,QAAMC,QAAQ,sBACdP,EAAKC,SAAS,iBAAO,CACnBP,SAAS,KAEXM,EAAKQ,MAAMC,QAAQC,KAAK,gBAEzBvB,MAAM,SAAAwB,GACLL,QAAMlB,MAAMuB,EAAIC,oFAIb,IACClB,EAAYmB,KAAKpB,MAAjBC,QACR,OACE3B,EAAAC,EAAAC,cAAA,OAAKE,UAAU,8BACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,+CACbJ,EAAAC,EAAAC,cAAA,QAAME,UAAU,8CACdJ,EAAAC,EAAAC,cAAA,QAAME,UAAU,8BAAhB,WACAJ,EAAAC,EAAAC,cAAC6C,EAAD,CAAOnD,MAAM,QAAQG,KAAK,QAAQD,SAAUgD,KAAKlB,eACjD5B,EAAAC,EAAAC,cAAC6C,EAAD,CACEnD,MAAM,WACNG,KAAK,WACLD,SAAUgD,KAAKlB,aACf/B,QAAM,IAERG,EAAAC,EAAAC,cAAC8C,EAAD,CAAQvC,KAAK,UAAUC,QAASoC,KAAKT,YACrCrC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,6BACbJ,EAAAC,EAAAC,cAAA,QAAME,UAAU,QAAhB,iBAEAJ,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,CAAMC,GAAG,UAAU9C,UAAU,YAA7B,kBAMLuB,GAAW3B,EAAAC,EAAAC,cAAA,OAAKE,UAAU,mBAxDf+C,aC8DLC,6MA7Db1B,MAAQ,CACNd,MAAO,GACPC,SAAU,GACVc,SAAS,KAGXC,aAAe,SAAAC,GAAK,IAAAC,EACMD,EAAEE,OAAlBhC,EADU+B,EACV/B,KAAMiC,EADIF,EACJE,MACdC,EAAKC,SAAS,kBAAAC,OAAAC,EAAA,EAAAD,CAAA,GACXpC,EAAOiC,QAIZqB,aAAe,WAAM,IAAAf,EACSL,EAAKP,MAAzBd,EADW0B,EACX1B,MAAOC,EADIyB,EACJzB,SACfoB,EAAKC,SAAS,iBAAO,CACnBP,SAAS,KAEXhB,EAAOC,EAAOC,GACXG,KAAK,SAAAC,GACJsB,QAAMC,QAAQ,yBACdP,EAAKC,SAAS,iBAAO,CACnBP,SAAS,KAEXM,EAAKQ,MAAMC,QAAQC,KAAK,OAEzBvB,MAAM,SAAAwB,GACLL,QAAMlB,MAAMuB,EAAIC,oFAIb,IACClB,EAAYmB,KAAKpB,MAAjBC,QACR,OACE3B,EAAAC,EAAAC,cAAA,OAAKE,UAAU,8BACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,+CACbJ,EAAAC,EAAAC,cAAA,QAAME,UAAU,8CACdJ,EAAAC,EAAAC,cAAA,QAAME,UAAU,8BAAhB,WACAJ,EAAAC,EAAAC,cAAC6C,EAAD,CAAOnD,MAAM,QAAQG,KAAK,QAAQD,SAAUgD,KAAKlB,eACjD5B,EAAAC,EAAAC,cAAC6C,EAAD,CACEnD,MAAM,WACNG,KAAK,WACLD,SAAUgD,KAAKlB,aACf/B,QAAM,IAERG,EAAAC,EAAAC,cAAC8C,EAAD,CAAQvC,KAAK,UAAUC,QAASoC,KAAKO,eACrCrD,EAAAC,EAAAC,cAAA,OAAKE,UAAU,6BACbJ,EAAAC,EAAAC,cAAA,QAAME,UAAU,QAAhB,mBAEAJ,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,CAAMC,GAAG,IAAI9C,UAAU,YAAvB,kBAMLuB,GAAW3B,EAAAC,EAAAC,cAAA,OAAKE,UAAU,mBAxDd+C,aCDfG,EAAYC,IAAMC,KAAK,kBAAMtC,QAAAuC,IAAA,CAAAC,EAAA7B,EAAA,GAAA6B,EAAA7B,EAAA,KAAAb,KAAA0C,EAAAC,KAAA,YAkBnC,IASeC,EATA,kBACb5D,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC2D,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWvC,IACjCzB,EAAAC,EAAAC,cAAC2D,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,UAAUC,UAAWC,IACvCjE,EAAAC,EAAAC,cAAC2D,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,aAAaC,WAZPb,EAYmCG,EAXpD,SAAAb,GAAK,OACVzC,EAAAC,EAAAC,cAACF,EAAAC,EAAMiE,SAAP,CAAgBC,SAAUnE,EAAAC,EAAAC,cAAA,0BACxBF,EAAAC,EAAAC,cAACiD,EAAcV,SAHrB,IAA0BU,GCR5BrC,gBAAuB,CACrBsD,OAAQ,0CACRC,WAAY,kCACZC,YAAa,yCACbC,UAAW,kBACXC,cAAe,8BACfC,kBAAmB,iBAGrB3D,WAAkB4D,eAAc,GAChC5D,WAAkB4D,cAAc,SAASC,GAEvCC,QAAQC,KAAI,IAAIC,MAAOC,cAAgB,KAAOJ,SAkBjCK,mLAbX,OACEhF,EAAAC,EAAAC,cAAC+E,EAAA,EAAD,KACEjF,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,WACbJ,EAAAC,EAAAC,cAACgF,EAAD,OAEFlF,EAAAC,EAAAC,cAACiF,EAAA,eAAD,eARQhC,aCXEiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1F,EAAAC,EAAAC,cAACyF,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhF,KAAK,SAAAiF,GACjCA,EAAaC","file":"static/js/main.7f05202e.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Input = ({ label, secret, onChange, name }) => (\n  <>\n    <div className=\"p-t-31 p-b-9\">\n      <span className=\"txt1\">{label}</span>\n    </div>\n    <div\n      className=\"wrap-input100 validate-input\"\n      data-validate=\"Username is required\"\n    >\n      <input\n        className=\"input100\"\n        type={secret ? \"password\" : \"text\"}\n        name={name}\n        onChange={onChange}\n      />\n      <span className=\"focus-input100\" />\n    </div>\n  </>\n);\n\nInput.defaultProps = {\n  secret: false,\n  onChange: () => {}\n};\n\nexport default Input;\n","import React from \"react\";\n\nconst Button = ({text, onClick}) => (\n  <div className=\"container-login100-form-btn m-t-17\">\n    <button type=\"button\" className=\"login100-form-btn\" onClick={onClick}>{text}</button>\n  </div>\n);\n\nButton.defaultProps = {\n    onClick: () => {}\n}\n\nexport default Button;\n","import * as firebase from \"firebase/app\";\n\nconst signup = (email, password) => {\n  return firebase\n    .auth()\n    .createUserWithEmailAndPassword(email, password)\n    .then(user => {\n      return Promise.resolve(user);\n    })\n    .catch(function(error) {\n      return Promise.reject(error);\n    });\n};\n\nconst login = (email, password) => {\n    return firebase\n      .auth()\n      .signInWithEmailAndPassword(email, password)\n      .then(user => {\n        return Promise.resolve(user);\n      })\n      .catch(function(error) {\n        return Promise.reject(error);\n      });\n  };\n\nexport {\n    signup,\n    login\n}\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Input from \"../../components/Input\";\nimport Button from \"../../components/Button\";\nimport { toast } from \"react-toastify\";\nimport { login } from \"../../apis/auth\";\n\nclass Login extends Component {\n  state = {\n    email: \"\",\n    password: \"\",\n    loading: false\n  };\n\n  handleChange = e => {\n    const { name, value } = e.target;\n    this.setState(() => ({\n      [name]: value\n    }));\n  };\n\n  loginUser = () => {\n    const { email, password } = this.state;\n    this.setState(() => ({\n      loading: true\n    }));\n    login(email, password)\n      .then(user => {\n        toast.success(\"Login Successfully\");\n        this.setState(() => ({\n          loading: false\n        }));\n        this.props.history.push(\"/dashboard\");\n      })\n      .catch(err => {\n        toast.error(err.message);\n      });\n  };\n\n  render() {\n    const { loading } = this.state;\n    return (\n      <div className=\"container-login100 bgImage\">\n        <div className=\"wrap-login100 p-l-110 p-r-110 p-t-62 p-b-33\">\n          <form className=\"login100-form validate-form flex-sb flex-w\">\n            <span className=\"login100-form-title p-b-53\">Sign In</span>\n            <Input label=\"Email\" name=\"email\" onChange={this.handleChange} />\n            <Input\n              label=\"Password\"\n              name=\"password\"\n              onChange={this.handleChange}\n              secret\n            />\n            <Button text=\"Sign In\" onClick={this.loginUser} />\n            <div className=\"w-full text-center p-t-55\">\n              <span className=\"txt2\">Not a member?</span>\n\n              <Link to=\"/signup\" className=\"txt2 bo1\">\n                Sign up now\n              </Link>\n            </div>\n          </form>\n        </div>\n        {loading && <div className=\"loader\" />}\n      </div>\n    );\n  }\n}\n\nexport default Login;\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Input from \"../../components/Input\";\nimport Button from \"../../components/Button\";\nimport { toast } from \"react-toastify\";\nimport { signup } from \"../../apis/auth\";\n\nclass Signup extends Component {\n  state = {\n    email: \"\",\n    password: \"\",\n    loading: false\n  };\n\n  handleChange = e => {\n    const { name, value } = e.target;\n    this.setState(() => ({\n      [name]: value\n    }));\n  };\n\n  registerUser = () => {\n    const { email, password } = this.state;\n    this.setState(() => ({\n      loading: true\n    }));\n    signup(email, password)\n      .then(user => {\n        toast.success(\"Register Successfully\");\n        this.setState(() => ({\n          loading: false\n        }));\n        this.props.history.push(\"/\");\n      })\n      .catch(err => {\n        toast.error(err.message);\n      });\n  };\n\n  render() {\n    const { loading } = this.state;\n    return (\n      <div className=\"container-login100 bgImage\">\n        <div className=\"wrap-login100 p-l-110 p-r-110 p-t-62 p-b-33\">\n          <form className=\"login100-form validate-form flex-sb flex-w\">\n            <span className=\"login100-form-title p-b-53\">Sign Up</span>\n            <Input label=\"Email\" name=\"email\" onChange={this.handleChange} />\n            <Input\n              label=\"Password\"\n              name=\"password\"\n              onChange={this.handleChange}\n              secret\n            />\n            <Button text=\"Sign Up\" onClick={this.registerUser} />\n            <div className=\"w-full text-center p-t-55\">\n              <span className=\"txt2\">Already member?</span>\n\n              <Link to=\"/\" className=\"txt2 bo1\">\n                Sign in now\n              </Link>\n            </div>\n          </form>\n        </div>\n        {loading && <div className=\"loader\" />}\n      </div>\n    );\n  }\n}\n\nexport default Signup;\n","import React from \"react\";\nimport { Route } from \"react-router-dom\";\n//import * as firebase from \"firebase/app\";\nimport Login from \"./containers/Login\";\nimport SignUp from \"./containers/Signup\";\n//import Dashboard from \"./containers/Dashboard\";\nconst Dashboard = React.lazy(() => import('./containers/Dashboard'));\n\n// const PrivateRoute = ({ component: Component, ...rest }) => (\n//     <Route {...rest} render={(props) => (\n//         firebase.auth().currentUser\n//         ? <Component {...props} />\n//         : <Redirect to='/' />\n//     )} />\n//   )\n\n  function WaitingComponent(Component) {\n    return props => (\n      <React.Suspense fallback={<div>Loading...</div>}>\n        <Component {...props} />\n      </React.Suspense>\n    );\n  }\n\nconst Routes = () => (\n  <div>\n    <Route exact path=\"/\" component={Login} />\n    <Route exact path=\"/signup\" component={SignUp} />\n    <Route exact path=\"/dashboard\" component={WaitingComponent(Dashboard)} />\n  </div>\n);\n\n\nexport default Routes;\n","import React, { Component } from \"react\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport * as firebase from \"firebase\";\nimport { ToastContainer } from \"react-toastify\";\nimport Routes from \"./routes\";\n\nfirebase.initializeApp({\n  apiKey: \"AIzaSyCc8FxGSQALmp6x5rs4hIey7na5iug10vU\",\n  authDomain: \"reactfire-7b424.firebaseapp.com\",\n  databaseURL: \"https://reactfire-7b424.firebaseio.com\",\n  projectId: \"reactfire-7b424\",\n  storageBucket: \"reactfire-7b424.appspot.com\",\n  messagingSenderId: \"236977303164\"\n});\n\nfirebase.database.enableLogging(true);\nfirebase.database.enableLogging(function(logMessage) {\n  // Add a timestamp to the messages.\n  console.log(new Date().toISOString() + ': ' + logMessage);\n});\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <>\n          <div className=\"limiter\">\n            <Routes />\n          </div>\n          <ToastContainer />\n        </>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}